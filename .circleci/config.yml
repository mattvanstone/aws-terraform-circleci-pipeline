version: 2.1

executors:
  terraform:
    docker:
      - image: hashicorp/terraform:0.12.17

prod-context: &prod-context
  context: production

dev-context: &dev-context
  context: development

requires: &requires # If custom requires are needed this anchor reference on the job needs to be replaced with a local declaration
  requires:
    - repo-supervisor

terraform_job: &terraform-job
  description: Run terraform plan against a specified environment.
  executor: terraform
  parameters:
    env:
      description: The name of the environment to run the job against
      type: string
    action:
      description: The terraform action to perform
      type: string
  steps:
    - checkout
    - run:
        name: terraform init 
        command: terraform init -input=false -backend-config=<< parameters.env >>.tfbackend
    - run:
        name: terraform << parameters.action >>
        command: terraform << parameters.action >> -var-file=<< parameters.env >>.tfvars -input=false
    
jobs:
  repo-supervisor:
    docker:
      - image: node:8-stretch
    steps:
      - checkout 
      - run:
          name: Install repo-supervisor
          command: |-
            cd ../ && git clone https://github.com/auth0/repo-supervisor.git && cd repo-supervisor
            npm install --no-optional
            npm run build
      - run:
          name: Run repo-supervisor
          command: cd ../repo-supervisor && npm run cli ../project/

  dev_plan:
    <<: *terraform-job
  
  prod_plan: 
    <<: *terraform-job

  dev_apply:
    <<: *terraform-job
  
  prod_apply: 
    <<: *terraform-job

  detect_drift:
    description: Runs terraform plan with detailed exitcode to detect drift
    <<: *terraform-job

workflows:
  plan_and_apply:
    description: A workflow that deploys to one environment and runs plan in the next environment.
    jobs:
      - repo-supervisor
      - dev_plan:
          <<: *dev-context
          env: dev
          action: plan
          filters:
            branches:
              ignore:
                - master
                - develop
          <<: *requires
      - prod_plan:
          <<: *prod-context
          env: prod
          action: plan
          filters:
            branches:
              only:
                - develop
          <<: *requires
      - dev_apply:
          <<: *dev-context
          env: dev
          action: apply -auto-approve
          filters:
            branches:
              only:
                - develop
          <<: *requires
      - prod_apply:
          <<: *prod-context
          env: prod
          action: apply -auto-approve
          filters:
            branches:
              only:
                - master
          <<: *requires
  
  drift_detection:
    description: A scheduled workflow to run daily at 2pm UTC to detect drift in the prod environment. Job will fail if state does not match the real environment.
    triggers:
      - schedule:
          cron: "0 14 * * *"
          filters:
            branches:
              only:
                - master
    jobs:
      - detect_drift:
          <<: *prod-context
          env: prod
          action: plan -detailed-exitcode